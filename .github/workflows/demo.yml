name: Deploy website
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      notes:
        description: "Run information"
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          # path to all files we want to cache and reuse in another job.
          # cache is updated also after the job finishes in order to keep the cache updated.
          path: ~/.npm
          # key is used to access the cache and to discarded the cache and force dependencies reinstall for example.
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish_file.outputs.the-script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # we move the cache step on every job we make the same action (install dependencies). Cache is stored in a central places and is accessible by all the jobs.
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          # path to all files we want to cache and reuse in another job.
          # cache is updated also after the job finishes in order to keep the cache updated.
          path: ~/.npm
          # key is used to access the cache and to discarded the cache and force dependencies reinstall for example.
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish_file
        run: find dist/assets/*.js -type f -execdir echo 'the-script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
          # path: |
          #   dist
          #   package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: get build artifact
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
